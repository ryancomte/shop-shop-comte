{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","utils/store.js","index.js"],"names":["module","exports","initialState","products","categories","currentCategory","cart","cartOpen","reducers","state","action","type","product","console","log","map","_id","purchaseQuantity","newState","filter","length","StoreContext","createContext","Provider","StoreProvider","value","props","useReducer","dispatch","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","image","name","price","quantity","useSelector","useDispatch","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","Cart","toggleCart","a","stuff","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","Home","Detail","useContext","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","variables","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","createStore","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.150c0f08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import { useReducer } from 'react';\n\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\nconst initialState = {\n  products: [],\n  categories: [],\n  currentCategory: '',\n  cart: [],\n  cartOpen: false,\n};\n\nexport const reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      console.log('add');\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducers, initialState);\n}\n\nexport default reducers;\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import React, { createContext, useContext } from 'react';\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n  });\n  // use this to confirm it works!\n  console.log(state);\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { pluralize } from '../../utils/helpers';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductItem(item) {\n  const { image, name, _id, price, quantity } = item;\n  const { cart } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  // const [state, dispatch] = useStoreContext();\n\n  // const { cart } = state;\n\n  const addToCart = () => {\n    // find the cart item with the matching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was a match, call UPDATE with a new purchase quantity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 },\n      });\n\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img alt={name} src={`/images/${image}`} />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>\n          {quantity} {pluralize('item', quantity)} in stock\n        </div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport ProductItem from '../ProductItem';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { useSelector, useDispatch } from 'react-redux';\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport { idbPromise } from '../../utils/helpers';\n\nfunction ProductList() {\n  // const [state, dispatch] = useStoreContext();\n\n  const { currentCategory, products } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return products;\n    }\n\n    return products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useSelector, useDispatch } from 'react-redux';\n//import { useStoreContext } from '../../utils/GlobalState';\n\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const { categories } = useSelector((state) => state);\n  const dispatch = useDispatch();\n  //const [state, dispatch] = useStoreContext();\n\n  //const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n//import { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nimport { idbPromise } from '../../utils/helpers';\n\nconst CartItem = ({ item }) => {\n  //const [, dispatch] = useStoreContext();\n  const dispatch = useDispatch();\n\n  const removeFromCart = (item) => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id,\n    });\n\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id,\n      });\n\n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value),\n      });\n\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img src={`/images/${item.image}`} alt=\"\" />\n      </div>\n      <div>\n        <div>\n          {item.name}, ${item.price}\n        </div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartItem;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\nconst Cart = () => {\n  // const [state] = useStoreContext();\n  const dispatch = useDispatch();\n  const { cart, cartOpen } = useSelector((state) => state);\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!cart.length) {\n      console.log(cart);\n      const stuff = getCart();\n      console.log(stuff);\n    }\n  }, [cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  if (!cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {cart.length ? (\n        <div>\n          {cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {Auth.loggedIn() ? (\n              <button>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../utils/GlobalState';\n\nimport Cart from '../components/Cart';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    } else if (data) {\n      console.log('DATA');\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from 'react';\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{\n        height: 560,\n        clear: 'both',\n        paddingTop: 120,\n        textAlign: 'center',\n      }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from 'react';\nimport Auth from '../../utils/auth';\nimport { Link } from 'react-router-dom';\n\nfunction Nav() {\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">Order History</Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">Signup</Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">Login</Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">\n            🛍️\n          </span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>{showNavigation()}</nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport { StoreProvider } from './utils/GlobalState';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore } from 'redux';\nimport reducers from './reducers';\n\nexport default createStore(reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\n\nimport store from './utils/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}